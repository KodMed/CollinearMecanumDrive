
close all;
clearvars;

numTests = 10; 
testLength = 1000;
previewing = true;


%% Generate test vectors
% Method 1
% phi_dot_max = 3;
% theta_p_max = 0.2;

% Method 2
phi_dot_max = 1:0.2:8;
theta_p_max = 0.1:0.01:0.4;

phi_dot_max_const =  parallel.pool.Constant(phi_dot_max);

tic
%% Run tests
numFeasible = zeros(numel(phi_dot_max), numel(theta_p_max));
for l=1:numel(phi_dot_max)
    parfor k=1:numel(theta_p_max)
        
        s_weight=[1.7 0.5 0.5 0.17]; % slacks set to 1/(max-min) such that s_weight*(max-min)=1 for all states
        try
            MPC = Derive_MPC_Reference_Previewing( ...
                  'Ts', 0.015 ...
                , 'nc', round(0.12/0.015) ...
                , 'R', 0.1*eye(4) ...
                , 'umax', 0.1*ones(4,1) ...
                , 'theta_p_max', theta_p_max(k) ...
                , 'v_y_max', 1 ...
                , 'v_x_max', 1 ...
                , 'phi_dot_max', phi_dot_max_const.Value(l) ... phi_dot_max_const.Value(l) ...
                , 'MAS', 'minimal' ...
                , 'MAS_tolerance', 1E-3 ...
                , 'removeConstraints', 1 ...
                , 'slackType', 'individualToNiForThetaPAndVyThenShared' ... 
                , 'constraintBlockingSize', 9 ...
                , 'ni', 3 ...
                , 'cinf_weighting', 1E-14 ...
                , 's_weight', s_weight*1E-5 ...
                , 's_weight_inf' , s_weight*1E5 ...
                , 'verbosity' , 0 ...
                );
        catch err
            disp(err.message);
            disp('Failed to derive controller');
            MPC = [];
        end

        %% Run simulations
        feasibleTemp = zeros(numTests,1);
        if ~isempty(MPC)
            for i=1:numTests
                [ref, x0] = generate_random_test_scenario(testLength, [0.5 0.5 1 zeros(1,5)],i);
                try
                    test = run_single_simulation(MPC, 'Nonlinear', 'qpOASES', x0, ref, previewing);
                    feasibleTemp(i) = test.feasible;
                catch err
                    disp(err.message);
                    disp('Error running simulation');
                end
            end
        end
        
        numFeasible(l,k) = nnz(feasibleTemp);

        %disp(['phi_dot_max = ' num2str(phi_dot_max(l)) ', theta_p_max = ' num2str(theta_p_max(k)) ', numFeasible = ' num2str(numFeasible(l,k)) ' of ' num2str(numTests)]);

%         plot_full_readout(test{1});
    end
    disp(['Completed ' num2str(l*numel(theta_p_max)*numTests) ' of ' num2str(numel(phi_dot_max)*numel(theta_p_max)*numTests) ' tests.']);
end
toc
% figure;
% surf(R, theta_p_max, result.numFeasible);

figure;
heatmap(phi_dot_max,theta_p_max,numFeasible);
xlabel('\(\overline{\dot{\phi}}\)');
ylabel('\(\overline{\dot{\theta}_p}\)');

% matlab2tikz('D:\Google_Drive\Matlab\Matt_MPC\Figures\thetapmax_phidotmax_heatmap.tex' ...
%     , 'width', '0.8\linewidth' ...
%     , 'parseStrings', false ...
%     , 'extraaxisoptions',[ ...
%     'title style={font=\footnotesize},'...
%     'xlabel style={font=\footnotesize},'...
%     'ylabel near ticks,'... 'every axis y label/.style={font=\footnotesize,at={(ticklabel cs:0.5,0.3)},rotate=90,anchor=center},'  ...
%     'ticklabel style={font=\scriptsize},' ...
%     'legend style={font=\scriptsize,at={(1.45,1)},anchor=north east},' ...
%     ...'legend pos=outer north east,' ...
%     ... 'height=0.3\linewidth,'...
%     ...' scaled y ticks = false,' ...
%     ...' y tick label style={/pgf/number format/fixed},' ...
%     ]);



